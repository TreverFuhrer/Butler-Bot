package com.toki.clever.commands.methods.Old;

import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.MessageHistory;
import net.dv8tion.jda.api.entities.channel.concrete.Category;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.entities.channel.middleman.GuildChannel;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.interactions.commands.OptionMapping;

import java.io.IOException;
import java.util.List;

import static com.toki.clever.webscraper.LiteroticaGenres.*;

public class CommandSort {

    public static void sortStory(SlashCommandInteractionEvent event) {
        OptionMapping linkOption = event.getOption("link");
        if (linkOption != null) {
            String link = linkOption.getAsString();
            System.out.println("-[" + link + "]");
            try {
                // Creates array of links tags
                String[] genres = getTags(link);
                // Gets title of story link
                String defaultTitle = getLinkTitle(link);
                // Makes the title bold in discord
                String title = "**" + defaultTitle + "**";

                // Creates channels named after links tags and sends the link in each
                if(!(checkIfAlreadySorted(event, genres, link))) {
                    // First reply to using command
                    event.reply("oooooooo, want me to put this naughty story away for you huh :flushed:\ni love your energy tonight ;)").queue();

                    // Creates channels from links tags
                    createGenreChannels(event, genres);
                    // Sends link and mentions all channels link is in
                    sendLinkAndGenres(event, genres, link, title);

                    // Creates string mentioning all channels link is in
                    String hashMessage = hashMessage(event, genres);

                    // Second reply to using command
                    String message = "\n\n" +
                            title + "\n<" + link + ">\n" + hashMessage;
                    event.getChannel().sendMessage(message).queue();
                }
                else {
                    // The reply if link was already sorted
                    String message = "you want me to put this naughty story away for you huh ;)\n" +
                            title + "\n<" + link + ">\n\n" +
                            "*but ummmmm, its already been sorted in the library...*";
                    event.reply(message).queue();
                    System.out.println("But was already sorted in the library...");
                }
            } catch (IOException e) {
                System.out.println("Error: Try Catch in Command Manager, Sort Command");
                event.reply("heyy, thats not a link silly... T_T").queue();
                throw new RuntimeException(e);
            }
        }
    }





    /**
     * Checks if that link was already sorted before
     * @param event message command event
     * @param genres string array of literotica links tags
     * @param link string of Literotica link from user
     * @return boolean - if it was sorted or not
     */
    public static boolean checkIfAlreadySorted(SlashCommandInteractionEvent event, String[] genres, String link) {
        boolean sorted = false;
        try {
            TextChannel textchannel = event.getGuild().getTextChannelsByName(genres[0], true).get(0);
            MessageHistory history = MessageHistory.getHistoryFromBeginning(textchannel).complete();
            List<Message> messages = history.getRetrievedHistory();
            for (int index = 0; index < messages.size(); index++)
                if (messages.get(index).getContentRaw().contains(link))
                    sorted = true;
            return sorted;
        }
        catch (IndexOutOfBoundsException e) {
            System.out.println("""

                    ERROR JDA - One of the EventListeners had an uncaught exception
                    java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
                    new channels will be created - checkIfAlreadySorted = false
                    """);
            return sorted;
        }
    }





    /**
     * Checks links tags vs current genre channels
     * If channel doesn't exist, creates channel for tag,
     * inside The Library Category.
     * @param event message command event
     * @param genres string array of literotica links tags
     */
    public static void createGenreChannels(SlashCommandInteractionEvent event, String[] genres) throws IOException {
        Category category = event.getGuild().getCategoryById("1100605246042013779");
        List<GuildChannel> currentGenres = category.getChannels();
        for (String s : genres) {
            int n = 0;
            for (GuildChannel currentGenre : currentGenres)
                if (!(String.valueOf(currentGenre).contains("TextChannel:" + s + "(id=")))
                    n++;
            if (n == currentGenres.size()) {
                System.out.println("Created a new channel for: " + s);
                category.createTextChannel(s).queue();
            }
        }
        // Wait for channel creation to finish
        String lastGenre = genres[genres.length - 1];
        while (event.getGuild().getTextChannelsByName(lastGenre, true).isEmpty()) {
            try {
                Thread.sleep(1000); // wait for 1 second
            } catch (InterruptedException e) {
                System.out.println("AAAYYYOOOOO, WAITING ERROR");
                e.printStackTrace();
            }
        }
    }





    /**
     * Sends users literotica link and channel mentions to the links tags
     * @param event message command event
     * @param genres string array of literotica links tags
     * @param link string of Literotica link from user
     */
    public static void sendLinkAndGenres(SlashCommandInteractionEvent event, String[] genres, String link, String title) throws IOException {
        String[] emojis = {":flushed:", ":face_with_spiral_eyes:", ":weary:", ":smirk:", ":eyes:", ":hot_face:", ":biting_lip:", ":peach:", ":eggplant:", ":pregnant_woman_tone1:"};
        int i = (int)(Math.random() * 9) + 1; // For getting a random emoji
        String hashMessage = hashMessage(event, genres); // Creates message that mentions each genre
        double rating = getLinkRating(link); // Gets rating of story
        int readTime = getLinkReadTime(link); // Gets time to read story
        String description = getLinkDescription(link); // Gets description of story
        double fullPop = getLinkPopularity(link); // Gets views of story
        // Simplifies views number
        String pop = "";
        if(fullPop > 1000) {
            int popNum = (int)fullPop / 1000;
            pop = popNum + "k";
        }
        else
            pop = String.valueOf(fullPop);

        for (String genre : genres) {
            // Gets each genre channel
            TextChannel textchannel = event.getGuild().getTextChannelsByName(genre, true).get(0);
            // Send the message with the channel mention to the current genre channel
            textchannel.sendMessage(title + " - " + readTime + " min to read\n" +
                    "[ " + rating + " *rating* || " + emojis[i] + " || " + pop + " *views* ]\n" +
                    "<" + link + ">\n" +
                    hashMessage + "\n" +
                    description).queue();
        }
    }





    /**
     * Creates a string of channel mentions to the users links tags
     * @param event message command event
     * @param genres string array of literotica links tags
     * @return String
     */
    public static String hashMessage(SlashCommandInteractionEvent event, String[] genres) {
        StringBuilder messageBuilder = new StringBuilder();
        // Creates message that mentions each genre
        for (String genre : genres) {
            // Gets each genre channel
            TextChannel textChannel = event.getGuild().getTextChannelsByName(genre, true).get(0);
            // Append the channel mention to the message
            messageBuilder.append(textChannel.getAsMention()).append(" ");
        }
        return messageBuilder.toString();
    }
}
